"""
Django settings for fossclub project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-hui!=81=z$m6b6#jv=9m645qtr_4km@u_#p*ez4m&6&(f8yh6i"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

ALLOWED_HOSTS = []

AUTH_USER_MODEL = "users.User"

USE_POSTGRES = os.getenv("USE_POSTGRES", False)


# Application definition

INSTALLED_APPS = [
    # custom
    "users",
    "perks",

    # django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.sites",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # third-party
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.gitlab",
    "huey.contrib.djhuey",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "fossclub.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(BASE_DIR / "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "fossclub.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if USE_POSTGRES:
    db_options = {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("PG_DBNAME", "fossclub_db"),
        "USER": os.environ.get("PG_USER", "fossclub"),
        "PASSWORD": os.environ.get("PG_PASSWORD", "fossclub"),
        "HOST": os.environ.get("PG_HOST", "127.0.0.1"),
        "PORT": int(os.environ.get("PG_PORT", 5432)),
    }
else:
    # for local dev environments (sqlite is easier to setup on windows)
    db_options = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }

DATABASES = {
    "default": db_options,
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
EMAIL_HOST = "localhost"
EMAIL_HOST = "1025"
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# allauth settings

ACCOUNT_AUTHENTICATION_METHOD = "username_email"

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

ACCOUNT_PRESERVE_USERNAME_CASING = False

SOCIALACCOUNT_EMAIL_VERIFICATION = False

SOCIALACCOUNT_PROVIDERS = {
    "github": {
        "APP": {
            "client_id": os.environ.get("GITHUB_CLIENT_ID"),
            "secret": os.environ.get("GITHUB_CLIENT_SECRET"),
        },
        "SCOPE": [
            "read:user",
        ],
    },
    "gitlab": {
        "APP": {
            "client_id": os.environ.get("GITLAB_CLIENT_ID"),
            "secret": os.environ.get("GITLAB_CLIENT_SECRET"),
        },
        "SCOPE": [
            "read_api",
            "read_user",
        ],
    }
}

SOCIALACCOUNT_STORE_TOKENS = True  # this will be needed for badges

SITE_ID = 1

HUEY = {
    "name": "fossclub",
    "consumer": {"workers": 4, "worker_type": "thread"},
    "immediate": False,
}
